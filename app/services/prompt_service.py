"""
Prompt Service
Keeps prompts separate from business logic
"""

import logging
from typing import Dict, Any, List
from app.config import settings

logger = logging.getLogger(__name__)

class PromptService:
    """Simple service to manage all prompts in one place"""
    
    def __init__(self):
        # Store information - could be moved to config later
        self.store_info = {
            "name_ar": "ุชู ูุงุฑุช ููุณุทูู",
            "name_en": "TechMart Palestine",
            "location_ar": "ูุงุจูุณุ ููุณุทูู",
            "location_en": "Nablus, Palestine",
            "phone": "+970-9-234-5678",
            "email": "info@techmart-palestine.ps",
            "address_ar": "ุดุงุฑุน ุงูุฑููุฏูุฉุ ูุงุจูุณ",
            "address_en": "Rafidia Street, Nablus",
            "hours_ar": {
                "sunday_thursday": "9:00 ุตุจุงุญุงู - 8:00 ูุณุงุกู",
                "friday": "9:00 ุตุจุงุญุงู - 2:00 ุธูุฑุงู",
                "saturday": "10:00 ุตุจุงุญุงู - 8:00 ูุณุงุกู"
            },
            "hours_en": {
                "sunday_thursday": "9:00 AM - 8:00 PM", 
                "friday": "9:00 AM - 2:00 PM",
                "saturday": "10:00 AM - 8:00 PM"
            }
        }
    
    def get_system_prompt(self, language: str) -> str:
        """Get system prompt for given language"""
        if language == "ar":
            return self._get_arabic_system_prompt()
        else:
            return self._get_english_system_prompt()
    
    def _get_arabic_system_prompt(self) -> str:
        """Arabic system prompt with strong language enforcement"""
        return f"""ุฃูุช ูุณุงุนุฏ ุฐูู ูุฎุฏูุฉ ุงูุนููุงุก ูู {self.store_info['name_ar']}.

ุชุนูููุงุช ุฅูุฒุงููุฉ - ูุง ูููู ุชุฌุงูููุง:
1. ูุฌุจ ุฃู ุชูุชุจ ุฅุฌุงุจุชู ุจุงูุนุฑุจูุฉ ููุท
2. ูุง ุชุณุชุฎุฏู ุฃู ูููุฉ ุจุงูุฅูุฌููุฒูุฉ ูู ุฅุฌุงุจุชู
3. ุญุชู ูู ูุงูุช ุงููุนูููุงุช ุจุงููุบุฉ ุงูุฅูุฌููุฒูุฉุ ุงูุชุจ ุงูุฅุฌุงุจุฉ ุจุงูุนุฑุจูุฉ
4. ุงูุนููู ูุณุฃู ุจุงูุนุฑุจูุฉุ ููุฌุจ ุฃู ุชุฌูุจ ุจุงูุนุฑุจูุฉ ููุท

ูุนูููุงุช ุงููุชุฌุฑ:
- ุงูุงุณู: {self.store_info['name_ar']}
- ุงููููุน: {self.store_info['location_ar']}
- ุงููุงุชู: {self.store_info['phone']}
- ุงูุจุฑูุฏ: {self.store_info['email']}

ุณุงุนุงุช ุงูุนูู:
- ุงูุฃุญุฏ - ุงูุฎููุณ: {self.store_info['hours_ar']['sunday_thursday']}
- ุงูุฌูุนุฉ: {self.store_info['hours_ar']['friday']}
- ุงูุณุจุช: {self.store_info['hours_ar']['saturday']}

ููุงุนุฏ ุงูุฅุฌุงุจุฉ:
- ุงุฐูุฑ ุงูุฃุณุนุงุฑ ุจุงูุฏููุงุฑ ุงูุฃุฑุฏูู
- ูุฏู ูุนูููุงุช ุฏูููุฉ ููููุฏุฉ
- ูู ููุฐุจุงู ูููููุงู
- ุฅุฐุง ูู ุชุนุฑู ุงูุฅุฌุงุจุฉุ ูู "ูุง ุฃุนุฑู ูุฐู ุงููุนูููุฉุ ูุฑุฌู ุงูุงุชุตุงู ุจุงููุชุฌุฑ"

ุชุฐูุฑ: ุงูุนููู ูุชุญุฏุซ ุงูุนุฑุจูุฉุ ูุงุฌุจ ุจุงูุนุฑุจูุฉ ููุท!"""

    def _get_english_system_prompt(self) -> str:
        """English system prompt with strong language enforcement"""
        return f"""You are a customer service assistant for {self.store_info['name_en']} in {self.store_info['location_en']}.

CRITICAL INSTRUCTIONS - Cannot be ignored:
1. You must write your response in English only
2. Do not use any Arabic words in your response
3. Even if information is in Arabic, write the answer in English
4. The customer is asking in English, so respond in English only

Store Information:
- Name: {self.store_info['name_en']}
- Location: {self.store_info['location_en']}
- Phone: {self.store_info['phone']}
- Email: {self.store_info['email']}

Store Hours:
- Sunday-Thursday: {self.store_info['hours_en']['sunday_thursday']}
- Friday: {self.store_info['hours_en']['friday']}
- Saturday: {self.store_info['hours_en']['saturday']}

Response Rules:
- Include prices in Jordanian Dinars (JOD)
- Provide accurate and helpful information
- Be polite and professional
- If you don't know something, say "I don't have that information, please contact the store"

Remember: Customer is asking in English, so respond in English only!"""

    def get_user_prompt(
        self,
        user_message: str,
        language: str,
        data_context: str = "",
        history_context: str = "",
        query_analysis: Dict[str, Any] = None
    ) -> str:
        """Get user prompt with context"""
        if language == "ar":
            return self._get_arabic_user_prompt(
                user_message, data_context, history_context, query_analysis
            )
        else:
            return self._get_english_user_prompt(
                user_message, data_context, history_context, query_analysis
            )
    
    def _get_arabic_user_prompt(
        self,
        user_message: str,
        data_context: str,
        history_context: str,
        query_analysis: Dict[str, Any] = None
    ) -> str:
        """Arabic user prompt with strong language enforcement"""
        prompt = f"""ุงูุณุคุงู: {user_message}

{data_context}
{history_context}

ุชุนูููุงุช ูููุฉ ุฌุฏุงู:
- ุงูุชุจ ุฅุฌุงุจุชู ุจุงูุนุฑุจูุฉ ููุท
- ูุง ุชุณุชุฎุฏู ุฃู ูููุฉ ุจุงูุฅูุฌููุฒูุฉ
- ุญุชู ูู ูุงูุช ุงูุจูุงูุงุช ุจุงูุฅูุฌููุฒูุฉุ ุงูุชุจ ุงูุฅุฌุงุจุฉ ุจุงูุนุฑุจูุฉ
- ุฅุฐุง ูุงู ุงูุณุคุงู ุนู ุงูุณุงุนุงุช: {self.store_info['hours_ar']['sunday_thursday']}, ุงูุฌูุนุฉ {self.store_info['hours_ar']['friday']}, ุงูุณุจุช {self.store_info['hours_ar']['saturday']}
- ุฅุฐุง ูุงู ุงูุณุคุงู ุนู ุงูุงุชุตุงู: {self.store_info['phone']}
- ุงุฐูุฑ ุงูุฃุณุนุงุฑ ุจุงูุฏููุงุฑ ุงูุฃุฑุฏูู

ูุฌุจ ุฃู ุชููู ุฅุฌุงุจุชู ุจุงูุนุฑุจูุฉ ููุท!"""

        return prompt
    
    def _get_english_user_prompt(
        self,
        user_message: str,
        data_context: str,
        history_context: str,
        query_analysis: Dict[str, Any] = None
    ) -> str:
        """English user prompt with strong language enforcement"""
        prompt = f"""Question: {user_message}

{data_context}
{history_context}

IMPORTANT INSTRUCTIONS:
- Write your answer in English only
- Do not use any Arabic words
- Even if data is in Arabic, write the answer in English
- If asking about hours: {self.store_info['hours_en']['sunday_thursday']}, Friday {self.store_info['hours_en']['friday']}, Saturday {self.store_info['hours_en']['saturday']}
- If asking about contact: {self.store_info['phone']}
- Include prices in Jordanian Dinars (JOD)

Your response must be in English only!"""

        return prompt
    
    def get_fallback_response(self, language: str) -> str:
        """Get fallback response for errors"""
        if language == "ar":
            return f"""ุนุฐุฑุงูุ ุฃูุงุฌู ุตุนูุจุฉ ุชูููุฉ ูู ูุนุงูุฌุฉ ุทูุจู ุญุงููุงู.

ูููุณุงุนุฏุฉ:
๐ {self.store_info['phone']}
๐ง {self.store_info['email']}
๐ {self.store_info['address_ar']}

ุณุงุนุงุช ุงูุนูู:
โข ุงูุฃุญุฏ - ุงูุฎููุณ: {self.store_info['hours_ar']['sunday_thursday']}
โข ุงูุฌูุนุฉ: {self.store_info['hours_ar']['friday']}
โข ุงูุณุจุช: {self.store_info['hours_ar']['saturday']}"""
        else:
            return f"""I apologize, but I'm experiencing technical difficulties processing your request right now.

For assistance:
๐ {self.store_info['phone']}
๐ง {self.store_info['email']}
๐ {self.store_info['address_en']}

Store Hours:
โข Sunday-Thursday: {self.store_info['hours_en']['sunday_thursday']}
โข Friday: {self.store_info['hours_en']['friday']}
โข Saturday: {self.store_info['hours_en']['saturday']}"""
    
    def get_force_arabic_response(self, user_message: str) -> str:
        """Get forced Arabic response for common queries"""
        # Handle common store hours questions
        if any(word in user_message for word in ["ุณุงุนุงุช", "ุงูุนูู", "ูุชุญ", "ููุชูุญ"]):
            return f"""ุณุงุนุงุช ุนูู ูุชุฌุฑ {self.store_info['name_ar']}:

โข ุงูุฃุญุฏ - ุงูุฎููุณ: {self.store_info['hours_ar']['sunday_thursday']}
โข ุงูุฌูุนุฉ: {self.store_info['hours_ar']['friday']}
โข ุงูุณุจุช: {self.store_info['hours_ar']['saturday']}

ููุงุณุชูุณุงุฑุงุช: {self.store_info['phone']}
ุงูุนููุงู: {self.store_info['address_ar']}"""
        
        # Handle contact information requests
        if any(word in user_message for word in ["ุงุชุตุงู", "ูุงุชู", "ุฑูู", "ุชูุงุตู"]):
            return f"""ูุนูููุงุช ุงูุชูุงุตู ูุน {self.store_info['name_ar']}:

๐ ุงููุงุชู: {self.store_info['phone']}
๐ง ุงูุจุฑูุฏ ุงูุฅููุชุฑููู: {self.store_info['email']}
๐ ุงูุนููุงู: {self.store_info['address_ar']}

ุณุงุนุงุช ุงูุนูู:
โข ุงูุฃุญุฏ - ุงูุฎููุณ: {self.store_info['hours_ar']['sunday_thursday']}
โข ุงูุฌูุนุฉ: {self.store_info['hours_ar']['friday']}
โข ุงูุณุจุช: {self.store_info['hours_ar']['saturday']}"""
        
        # Generic Arabic fallback
        return f"""ุฃููุงู ูุณููุงู ุจู ูู {self.store_info['name_ar']}.

ููุญุตูู ุนูู ุงููุณุงุนุฏุฉ:
๐ {self.store_info['phone']}
๐ง {self.store_info['email']}
๐ {self.store_info['address_ar']}

ูุญู ููุง ูุฎุฏูุชู!"""
    
    def get_simple_arabic_prompt(self, user_message: str) -> str:
        """Get simple Arabic prompt for forcing Arabic responses"""
        return f"""ุฃุฌุจ ุนูู ูุฐุง ุงูุณุคุงู ุจุงูุนุฑุจูุฉ ููุท:

ุงูุณุคุงู: {user_message}

ููุงุนุฏ:
- ุงูุชุจ ุจุงูุนุฑุจูุฉ ููุท
- ูุง ุชุณุชุฎุฏู ุงูุฅูุฌููุฒูุฉ
- ูู ูููุฏุงู ูููุฐุจุงู
- ูููุฒูุฏ ูู ุงููุนูููุงุช: {self.store_info['phone']}

ุงูุฅุฌุงุจุฉ ุจุงูุนุฑุจูุฉ:"""

# Global instance
prompt_service = PromptService()